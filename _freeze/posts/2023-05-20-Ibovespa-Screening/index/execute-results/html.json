{
  "hash": "8a6f05d222041dd8ba75e4b102570c93",
  "result": {
    "markdown": "---\ntitle: \"Automating a panel creation of Yahoo! Finance tickers using R\"\ndescription: \"A set of ETL routines to collect, treat, and analyze stock price information for a bundle of tickers simultaneously.\"\nauthor:\n  - name: Lucas S. Macoris\n    url: https://lsmacoris.github.io/\n    orcid: 0000-0003-0732-5011\n    affiliation: Ph.D in Economics @ INSPER (Sao Paulo, Brazil) & Media Mix Modelling/Data Science @ Circana\n    affiliation-url: https://www.circana.com/\ndate: 5-20-2023\ncategories: [Quarto, R] # self-defined categories\ncitation: \n  url: https://lsmacoris.github.io/posts/2023-05-20-Ibovespa-Screening\nimage: post_thumbnail.jpeg\ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\n---\n\n\nThis notebook uses *Yahoo! Finance* to collect data and generate trading signals. The aim of this notebook is to provide an automated screening system in which, based on the technical indicators defined by the researcher, one can easily run a screening daily screening process in order to select a bundle of assets for a given trading strategy. This notebook implements this by using *Yahoo! Finance!* data on a daily basis.\n\nFor that, we are going to present a simple example using a set of brazilian traded stocks in *Bovespa*. All the stocks are presented in the auxiliary *.csv* file, `Assets.csv`, and can be changed to accomodate any stock available in *Yahoo! Finance* servers.\n\n**Important Remark**: *Yahoo! Finance* generally offers data with splits and dividends adjustments and therefore may not be the same as the brokerage information. In this sense, recommendations must also be analyzed through technical indicators presented on the brokerage account. Additionally, one can change the log in order to use any other provider of financial data of the same format, such as [*AlphaVantage*](https://www.alphavantage.co/), which also has an API support into the `quantmod` library.\n\n## Loading Necessary Libraries\n\nAlthough this is totally up to you, I've selected a few packages that make the overall task easier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackages.to.install=c(\"ggplot2\",\"dplyr\",\"tidyr\",\"PerformanceAnalytics\",\"quantmod\",\"xts\",\"ggpubr\",\"zoo\",\"quantmod\",\"flextable\")\n\nsapply(packages.to.install,library,character.only = TRUE)\n\n#Read a list of assets\nAssets<-read.csv('Assets.csv',sep=';',encoding = 'UTF-8',header = TRUE,stringsAsFactors = FALSE)[,1]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Let's take a look at the structure of the file\nAssets%>%head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ABEV3.SA\" \"AZUL4.SA\" \"B3SA3.SA\" \"BBAS3.SA\" \"BBDC3.SA\" \"BBDC4.SA\"\n [7] \"BBSE3.SA\" \"BRAP4.SA\" \"BRDT3.SA\" \"BRFS3.SA\"\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}